# lisätään määrittelyt parametreille yms tänne
---
info:
  contact:
    email: example@email.com
    name: PWP-Webbipojat
    url: https://example.com
  description: |
    Watchlist Web API stores a collection of content such as movies and series.
    Users of the API can create and view watchlists that include any content in the database.
  license:
    name: MIT
    url: https://opensource.org/license/MIT
  termsOfService: http://example.com
  title: Watchlist Web API
  version: 1.0.0
openapi: 3.0.3
components:
  schemas:
    User:
      type: object
      properties:
        username:
          type: string
          example: johndoe
        email:
          type: string
          example: johndoe@gmail.com
        password:
          type: string
          example: password123
    Content:
      type: object
      properties:
        name:
          type: string
          example: Interstellar
        content_type:
          type: string
          enum:
            - SERIES
            - MOVIE
      required:
        - name
        - content_type
    Watchlist:
      type: object
      properties:
        content_ids:
          type: array
          description: IDs of content to include in this watchlist
          items:
            type: number
          example: [1, 2]
        user_note:
          type: string
          description: Note associated with this watchlist
          example: "My favorite sci-fi movies"
        public_entry:
          type: boolean
          description: Whether this watchlist is publicly visible
          example: true
      required:
        - content_ids
        - user_note
  parameters:
    content:
      description: Unique ID of content
      in: path
      name: content
      required: true
      schema:
        type: string
    user:
      description: Username of the user
      in: path
      name: user
      required: true
      schema:
        type: string
    watchlist:
      description: Unique ID of a watchlist
      in: path
      name: watchlist
      required: true
      schema:
        type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
paths:
  /auth/login/:
    post:
      description: Get authentication token for user by supplying valid credentials
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  description: Name of the user
                password:
                  type: string
                  description: Password of the user
            example:
              username: johndoe
              password: password
      responses:
        '200':
          description: Authentication token for user
          content:
            application/json:
              example:
                token: token_value
        '403':
          description: Invalid credentials
        '400':
          description: Username or password not supplied
        '404':
          description: User does not exist

